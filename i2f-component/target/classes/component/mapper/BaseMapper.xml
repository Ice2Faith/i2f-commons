<?xml version = "1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="i2f.component.mybatis.core.BaseDao">
    <!--    <cache/> -->
    <sql id="sqlQueryColsPart">
        <if test="wrapper.queryCols!=null and wrapper.queryCols.size>0">
            <foreach collection="wrapper.queryCols" item="item" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="wrapper.queryCols==null or wrapper.queryCols.size==0">
            *
        </if>
    </sql>
    <sql id="sqlJoinPart">
        <if test="wrapper.joinPart!=null and wrapper.joinPart.size>0">
            <foreach collection="wrapper.joinPart" item="item">
                ${item.fst} join ${item.sec} on ${item.trd}
            </foreach>
        </if>
    </sql>
    <sql id="sqlWhereConditionsPart">
        <if test="wrapper.whereConditions!=null and wrapper.whereConditions.size>0">
            <foreach collection="wrapper.whereConditions" item="item">
                ${item.fst} ${item.sec} #{item.trd}
            </foreach>
        </if>
    </sql>
    <sql id="sqlFreeWhereConditionPart">
        <if test="wrapper.freeWhereCondition!=null and wrapper.freeWhereCondition.size>0">
            <foreach collection="wrapper.freeWhereCondition" item="item">
                ${item.key} ${item.val}
            </foreach>
        </if>
    </sql>
    <sql id="sqlInWhereConditionPart">
        <if test="wrapper.inWhereCondition!=null and wrapper.inWhereCondition.size>0">
            <foreach collection="wrapper.inWhereCondition" item="item" index="index">
                ${item.fst} ${item.sec} in (
                <foreach collection="wrapper.inWhereCondition[index].trd" item="pitem" separator=",">
                    #{pitem}
                </foreach>
                )
            </foreach>
        </if>
    </sql>
    <sql id="sqlLikeWhereConditionPart">
        <if test="wrapper.likeWhereCondition!=null and wrapper.likeWhereCondition.size>0">
            <foreach collection="wrapper.likeWhereCondition" item="item" index="index">
                ${item.fst} (
                <trim prefixOverrides="AND|OR">
                    <foreach collection="wrapper.likeWhereCondition[index].trd" item="pitem">
                        or ${item.sec} like '%' #{pitem} '%'
                    </foreach>
                </trim>
                )
            </foreach>
        </if>
    </sql>
    <sql id="sqlMultiLikesWhereConditionPart">
        <if test="wrapper.multiLikeWhereCondition!=null and wrapper.multiLikeWhereCondition.size>0">
            <foreach collection="wrapper.multiLikeWhereCondition" item="item" index="index">
                ${item.key} (
                <trim prefixOverrides="AND|OR">
                    <foreach collection="wrapper.multiLikeWhereCondition[index].val" index="key" item="val">
                        <foreach collection="wrapper.multiLikeWhereCondition[index].val[key]" item="it">
                            or ${key} like '%' #{it} '%'
                        </foreach>
                    </foreach>
                </trim>
                )
            </foreach>
        </if>
    </sql>
    <sql id="sqlHavingConditionsPart">
        <if test="wrapper.havingConditions!=null and wrapper.havingConditions.size>0">
            having
            <trim prefixOverrides="AND|OR">
                <foreach collection="wrapper.havingConditions" item="item">
                    ${item.fst} ${item.sec} #{item.trd}
                </foreach>
            </trim>
        </if>
    </sql>
    <sql id="sqlGroupByPart">
        <if test="wrapper.groupBy!=null and wrapper.groupBy.size>0">
            group by
            <foreach collection="wrapper.groupBy" item="item" separator=",">
                ${item}
            </foreach>
            <include refid="sqlHavingConditionsPart"></include>
        </if>
    </sql>
    <sql id="sqlOrderByPart">
        <if test="wrapper.orderBy!=null and wrapper.orderBy.size>0">
            order by
            <foreach collection="wrapper.orderBy" item="item" separator=",">
                ${item.key} ${item.val}
            </foreach>
        </if>
    </sql>
    <sql id="sqlBaseWhereConditionPart">
        <include refid="sqlWhereConditionsPart"></include>
        <include refid="sqlFreeWhereConditionPart"></include>
        <include refid="sqlInWhereConditionPart"></include>
        <include refid="sqlLikeWhereConditionPart"></include>
        <include refid="sqlMultiLikesWhereConditionPart"></include>
    </sql>
    <sql id="sqlQueryCommon">
        select
        <include refid="sqlQueryColsPart"></include>
        from ${wrapper.tableName}
        <include refid="sqlJoinPart"></include>
        <where>
            <include refid="sqlBaseWhereConditionPart"></include>
        </where>
        <include refid="sqlGroupByPart"></include>
        <include refid="sqlOrderByPart"></include>
    </sql>

    <sql id="sqlMySqlPageLimitPart">
        <if test="wrapper.pageOffset!=null and wrapper.pageLimit!=null">
            limit #{wrapper.pageOffset},#{wrapper.pageLimit}
        </if>
    </sql>
    <sql id="sqlPostgrePageLimitOffsetPart">
        <if test="wrapper.pageLimit!=null and wrapper.pageOffset!=null">
            limit #{wrapper.pageLimit}
            offset #{wrapper.pageOffset}
        </if>
    </sql>

    <sql id="sqlPageMySql">
        <include refid="sqlQueryCommon"></include>
        <include refid="sqlMySqlPageLimitPart"></include>
    </sql>
    <sql id="sqlPageOracle">
        SELECT *
        FROM (SELECT TMP.*, ROWNUM ROW_ID
        FROM (
        <include refid="sqlQueryCommon"></include>
        ) TMP
        WHERE ROWNUM &lt;= #{wrapper.pageOffsetEnd})
        WHERE ROW_ID > #{wrapper.pageOffset}
    </sql>
    <sql id="sqlPagePostgre">
        <include refid="sqlQueryCommon"></include>
        <include refid="sqlPostgrePageLimitOffsetPart"></include>
    </sql>

    <select id="queryNative" resultType="java.util.Map">
        ${sql}
    </select>

    <insert id="insertNative">
        ${sql}
    </insert>

    <update id="updateNative">
        ${sql}
    </update>

    <delete id="deleteNative">
        ${sql}
    </delete>

    <update id="executeNative">
        ${sql}
    </update>

    <select id="queryAll" resultType="java.util.Map">
        select * from ${tableName}
    </select>

    <update id="emptyTable">
        delete from ${tableName}
    </update>

    <update id="dropTable">
        drop table if exists ${tableName}
    </update>

    <select id="countTable" resultType="java.lang.Long">
        select count(*) from ${tableName}
    </select>

    <select id="queryCommon" resultType="java.util.Map">
        <include refid="sqlQueryCommon"></include>
    </select>

    <select id="queryCommonMySqlPage" resultType="java.util.Map">
        <include refid="sqlPageMySql"></include>
    </select>

    <select id="queryCommOraclePage" resultType="java.util.Map">
        <include refid="sqlPageOracle"></include>
    </select>

    <select id="queryCommonMariaDBPage" resultType="java.util.Map">
        <include refid="sqlPageMySql"></include>
    </select>

    <select id="queryCommonGbasePage" resultType="java.util.Map">
        <include refid="sqlPageMySql"></include>
    </select>

    <select id="queryCommonOscarPage" resultType="java.util.Map">
        <include refid="sqlPageMySql"></include>
    </select>

    <select id="queryCommonXuGuPage" resultType="java.util.Map">
        <include refid="sqlPageMySql"></include>
    </select>

    <select id="queryCommonClickHousePage" resultType="java.util.Map">
        <include refid="sqlPageMySql"></include>
    </select>

    <select id="queryCommonOceanBasePage" resultType="java.util.Map">
        <include refid="sqlPageMySql"></include>
    </select>

    <select id="queryCommonPostgrePage" resultType="java.util.Map">
        <include refid="sqlPagePostgre"></include>
    </select>

    <select id="queryCommonPostgreSqlPage" resultType="java.util.Map">
        <include refid="sqlPagePostgre"></include>
    </select>

    <select id="queryCommonH2Page" resultType="java.util.Map">
        <include refid="sqlPagePostgre"></include>
    </select>

    <select id="queryCommonSqlLitePage" resultType="java.util.Map">
        <include refid="sqlPagePostgre"></include>
    </select>

    <select id="queryCommonHSqlPage" resultType="java.util.Map">
        <include refid="sqlPagePostgre"></include>
    </select>

    <select id="queryCommonKingBaseEsPage" resultType="java.util.Map">
        <include refid="sqlPagePostgre"></include>
    </select>

    <select id="queryCommonPhoenixPage" resultType="java.util.Map">
        <include refid="sqlPagePostgre"></include>
    </select>

    <select id="queryCommDmPage" resultType="java.util.Map">
        <include refid="sqlPageOracle"></include>
    </select>

    <select id="queryCommGaussPage" resultType="java.util.Map">
        <include refid="sqlPageOracle"></include>
    </select>

    <select id="queryCommonOracle12cPage" resultType="java.util.Map">
        <include refid="sqlQueryCommon"></include>
        offset #{wrapper.pageOffset}
        rows fetch next #{wrapper.pageLimit} rows only
    </select>

    <select id="queryCommonDb2Page" resultType="java.util.Map">
        SELECT * FROM (
        SELECT TMP_PAGE.*,ROWNUMBER() OVER() AS ROW_ID FROM (
        <include refid="sqlQueryCommon"></include>
        ) AS TMP_PAGE
        ) TMP_PAGE
        WHERE ROW_ID BETWEEN #{wrapper.pageOffset} AND #{wrapper.pageOffsetEnd}
    </select>

    <select id="queryCommonSQLServerPage" resultType="java.util.Map">
        <include refid="sqlQueryCommon"></include>
        offset #{wrapper.pageOffset}
        rows fetch next #{wrapper.pageLimit} rows only
    </select>

    <select id="queryCountCommon" resultType="java.lang.Long">
        select count(*) cnt
        from (
        <include refid="sqlQueryCommon"></include>
        ) tmp
    </select>

    <delete id="deleteCommon">
        delete from ${wrapper.tableName}
        <where>
            <include refid="sqlBaseWhereConditionPart"></include>
        </where>
    </delete>

    <update id="updateCommon">
        update ${wrapper.tableName}
        set
        <trim prefixOverrides="," suffixOverrides=",">
            <foreach collection="wrapper.valPairs" item="item" separator=",">
                ${item.key} = #{item.val}
            </foreach>
            <if test="wrapper.nativeValPairs!=null and wrapper.nativeValPairs.size>0">
                ,
                <foreach collection="wrapper.nativeValPairs" item="item" separator=",">
                    ${item.key} ${item.val}
                </foreach>
            </if>
        </trim>
        <where>
            <include refid="sqlBaseWhereConditionPart"></include>
        </where>
    </update>

    <insert id="insertCommon">
        insert into
        ${wrapper.tableName}
        (
        <trim suffixOverrides="," prefixOverrides=",">
            <foreach collection="wrapper.valPairs" item="item" separator=",">
                ${item.key}
            </foreach>
            <if test="wrapper.nativeValPairs!=null and wrapper.nativeValPairs.size>0">
                ,
                <foreach collection="wrapper.nativeValPairs" item="item" separator=",">
                    ${item.key}
                </foreach>
            </if>
        </trim>

        )
        values
        (
        <trim prefixOverrides="," suffixOverrides=",">
            <foreach collection="wrapper.valPairs" item="item" separator=",">
                #{item.val}
            </foreach>
            <if test="wrapper.nativeValPairs!=null and wrapper.nativeValPairs.size>0">
                ,
                <foreach collection="wrapper.nativeValPairs" item="item" separator=",">
                    ${item.val}
                </foreach>
            </if>
        </trim>

        )

    </insert>

    <insert id="insertCommonReturnId">
        insert into
        ${wrapper.tableName}
        (
        <trim prefixOverrides="," suffixOverrides=",">
            <foreach collection="wrapper.valPairs" item="item" separator=",">
                ${item.key}
            </foreach>
            <if test="wrapper.nativeValPairs!=null and wrapper.nativeValPairs.size>0">
                ,
                <foreach collection="wrapper.nativeValPairs" item="item" separator=",">
                    ${item.key}
                </foreach>
            </if>
        </trim>

        )
        values
        (
        <trim prefixOverrides="," suffixOverrides=",">
            <foreach collection="wrapper.valPairs" item="item" separator=",">
                #{item.val}
            </foreach>
            <if test="wrapper.nativeValPairs!=null and wrapper.nativeValPairs.size>0">
                ,
                <foreach collection="wrapper.nativeValPairs" item="item" separator=",">
                    ${item.val}
                </foreach>
            </if>
        </trim>

        )
        <selectKey order="AFTER" resultType="java.lang.Long" keyProperty="wrapper.returnIdValue">
            select @@IDENTITY
        </selectKey>
    </insert>
    <insert id="insertCommonBatch">
        insert into
        ${wrapper.tableName}
        (
        <foreach collection="wrapper.cols" index="key" item="val" separator=",">
            ${key}
        </foreach>
        )
        values
        <foreach collection="wrapper.multiVals" item="row" index="index" separator=",">
            (
            <foreach collection="wrapper.multiVals[index]" index="key" item="val" separator=",">
                #{val}
            </foreach>
            )
        </foreach>
    </insert>
</mapper>
